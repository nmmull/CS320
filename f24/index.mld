{0 CAS CS 320: Concepts of Programming Languages}

{1 What is this course?}

CAS CS 320 is a course {i about} programming languages, particularly the {b design} and {b implementation} of programming languages.
In this course, we take up the "programming language" as an {i object of formal study}.
This course is {i not} about how to program, though the principles we cover are generally useful for designing and reasoning about programs.

The first part of the course is on functional programming in {{: https://ocaml.org/ }OCaml}, based on {i CS 3110: Data Structures and Functional Programming} at Cornell University and its associated {{: https://cs3110.github.io/textbook/cover.html }textbook} (referred to as OCP below).
Its topics include inductive types, data abstraction, higher-order functions, combinators, and polymorphism.
It is during this part that we learn to {i think} functionally, to view programs not (necessarily) as sequences of commands manipulating global state, but as compositions of (pure) functions which decompose and reorient data.

In the second part of the course we {i implement} several interpreters for a small fragment of OCaml itself (that is, we will build OCaml programs which {i execute} OCaml programs).
The topics covered include parsing, operational semantics, variable scope and binding, stack-based languages, byte-code interpretation, and type checking.
After this part, you will be able to run some of the (simpler) programs we wrote in the first part of the course (pretty neat).

{2 Prerequisites}

- CAS CS 111 & 112: Introduction to Computer Science
- CAS CS 131: Combinatoric Structures
- CAS CS 210: Computer Systems

You'll get the most out of this course (and will have the best time of it) if you complete the 200 level CS major requirements beforehand.
Experience with a high-level programming language (like Python or Java) is a must.

{2 Requisites}

The workload for this course consists of assignments, mini-projects, a midterm exam, and a final exam.
Your final grade in the course will be determined by the following breakdown:

- 30% Assignments (6 of 7 assignments, 5% each)
- 30% Mini-project (4 total, ≈7% each)
- 20% Midterm exam
- 20% Final exam

{2:minutiae Minutiae}

{b Instructors:} Ankush Das and Nathan Mull

{b Teaching Fellows:} Zachery Casey, Qiancheng (Robin) Fu, and june wunder

{b Lecture Times and Locations:}
- TR 11AM-12:15PM LSE B01 (A1)
- TR 12:30-1:45PM KCB 101 (A2) {b (Warning: location not yet confirmed)}

{b Lab Times:} See the {{: https://www.bu.edu/academics/cas/courses/cas-cs-320/}Course Registar}

See the {!section-course_info} section for more details.

{1 Important Links}

- {{: https://piazza.com/class/m04dwmzkfjt4zh }Piazza}
- {{: https://www.gradescope.com/courses/818075 }Gradescope}
- {{: https://github.com/BU-CS320/cs320-fall-2024 }Course Repository}
- {{!Specifications.Stdlib320} Course Standard Library}
- Office hours calendar

You may also want to take a look at:
- {{: https://ocaml.org/ }OCaml}
- {{: https://code.visualstudio.com }VS Code}

{1 Assignments}

- {{!Specifications.Assign00} Assignment 0}
- {{!Specifications.Assign01} Assignment 1}

{1:schedule Schedule}

See the {{!page-topics} full list of topics} (linked in the entries of the table below) for more details.

{table
  {tr
    {th Date}
    {th Topic}
    {th Assignments}
  }
  {tr
    {td }
    {td }
    {td }
  }
  {tr
    {td Tue 9/3}
    {td {{!page-topics.course_intro}Course Introduction}}
    {td A0 out}
  }
  {tr
    {td Wed 9/4}
    {td Week 1 Lab: Installation Help}
    {td }
  }
  {tr
    {td Thu 9/5}
    {td {{!page-topics.ocaml_intro_i}Beginning Ocaml I: The Basics}}
    {td A1 out}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 9/10}
    {td {{!page-topics.ocaml_intro_ii}Beginning Ocaml II: Lists, Tail Recursion}}
    {td }
  }
  {tr
    {td Wed 9/11}
    {td Week 2 Lab: Practice with Ocaml}
    {td }
  }
  {tr
    {td Thu 9/12}
    {td {{!page-topics.ocaml_intro_iii}Beginning OCaml III: Unions and Products}}
    {td A2 out, A1 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 9/17}
    {td {{!page-topics.adt_i}Algebraic Data Types I: Introduction}}
    {td }
  }
  {tr
    {td Wed 9/18}
    {td Week 3 Lab: Practice with ADTs}
    {td }
  }
  {tr
    {td Thu 9/19}
    {td {{!page-topics.adt_ii}Algebraic Data Types II: Examples}}
    {td A3 out, A2 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 9/24}
    {td {{!page-topics.hop_i}Higher Order Programming I: Maps and Filters}}
    {td }
  }
  {tr
    {td Wed 9/25}
    {td Week 4 Lab: Practice with HOP}
    {td }
  }
  {tr
    {td Thu 9/26}
    {td {{!page-topics.hop_ii}Higher Order Programming II: Folds}}
    {td A4 out, A3 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 10/1}
    {td {{!page-topics.mod_i}Modular Programming I: Introduction}}
    {td }
  }
  {tr
    {td Wed 10/2}
    {td Week 5 Lab: Practice with Modules}
    {td }
  }
  {tr
    {td Thu 10/3}
    {td {{!page-topics.mod_ii}Modular Programming II: Examples}}
    {td A5 out, A4 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 10/8}
    {td {{!page-topics.monads}Advanced Ocaml: Introduction to Monads}}
    {td }
  }
  {tr
    {td Wed 10/9}
    {td Week 6 Lab: The Result Monad}
    {td }
  }
  {tr
    {td Thu 10/10}
    {td {{!page-topics.lcalc}The Lambda Calculus}}
    {td A5 due, A6 out}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 10/15}
    {td {b No Lecture}}
    {td }
  }
  {tr
    {td Wed 10/16}
    {td Week 7 Lab: Midterm Review}
    {td }
  }
  {tr
    {td Thu 10/17}
    {td {b Midterm}}
    {td }
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 10/22}
    {td {{!page-topics.parse_i}Parsing I: Formal Grammar}}
    {td }
  }
  {tr
    {td Wed 10/23}
    {td Week 8 Lab: Recursive Descent Parsing}
    {td }
  }
  {tr
    {td Thu 10/24}
    {td {{!page-topics.parse_ii}Parsing II: Lexer/Parser Generators}}
    {td A7 out, A6 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 10/29}
    {td {{!page-topics.sem_i}Formal Semantics I: Operational Semantics}}
    {td }
  }
  {tr
    {td Wed 10/30}
    {td Week 9 Lab: A Calculator}
    {td }
  }
  {tr
    {td Thu 10/31}
    {td {{!page-topics.sem_ii}Formal Semantics II: The Substitution Model}}
    {td MP1 out, A7 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 11/5}
    {td {{!page-topics.sem_iii}Formal Semantics III: Variables, Scope, Parameter Passing}}
    {td }
  }
  {tr
    {td Wed 11/6}
    {td Week 10 Lab: A Language with Dynamic Scoping}
    {td }
  }
  {tr
    {td Thu 11/7}
    {td {{!page-topics.sem_iv}Formal Semantics IV: Closures and the Environment Model}}
    {td MP2 out, MP1 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 11/12}
    {td {{!page-topics.stack_i}Stack-Based Languages I: Introduction}}
    {td }
  }
  {tr
    {td Wed 11/13}
    {td Week 11 Lab: A Stack-Based Calculator}
    {td }
  }
  {tr
    {td Thu 11/14}
    {td {{!page-topics.stack_ii}Stack-Based Languages II: Environments and Procedures}}
    {td MP3 out, MP2 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 11/19}
    {td {{!page-topics.comp_i}Compilation I: Introduction}}
    {td }
  }
  {tr
    {td Wed 11/20}
    {td Week 12 Lab: Compiling the Lambda Calculus}
    {td }
  }
  {tr
    {td Thu 11/21}
    {td {{!page-topics.comp_ii}Compilation II: Byte-Code Interpretation}}
    {td MP4, out, MP3 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 11/26}
    {td {{!page-topics.comp_iii}Compilation III: Examples}}
    {td }
  }
  {tr
    {td Wed 11/27}
    {td {b No Lab}}
    {td }
  }
  {tr
    {td Thu 11/28}
    {td {b No Lecture}}
    {td }
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 12/3}
    {td {{!page-topics.types_i}Types I: Type Checking}}
    {td }
  }
  {tr
    {td Wed 12/4}
    {td Week 14 Lab: Help with Mini-Project 4}
    {td }
  }
  {tr
    {td Thu 12/5}
    {td {{!page-topics.types_ii}Types II: Type Inference}}
    {td MP4 due}
  }
  {tr {td } {td } {td }}
  {tr
    {td Tue 12/10}
    {td {{!page-topics.adv}Advanced Topic: TBA}}
    {td }
  }
  {tr {td } {td } {td }}
  {tr
    {td TBA}
    {td {b Final Exam}}
    {td }
  }
}

{1:course_info Course Information}

{2 Lectures}

We hold lectures each week on Tuesdays and Thursdays (see details {{!minutiae}above}).
During lecture, we cover the material that is presented in the reading and do some live coding examples.
Lecture material is available in the course repository before the lecture meeting.

It is not guaranteed that everything we cover in lecture will be available in the associated reading.
So although we will not take attendance, it is highly recommended that you come to lecture if you want to get the most out of the course.

The course is split into two parts, the first part on OCaml and the second part on building interpreters.
The first part will be taught by Ankush Das and the second part will be taught by Nathan Mull.

{2 Labs}

We hold lab meetings once a week on Wednesdays (see details {{!minutiae}above}).
Please attend the lab meeting in which you are registered.
This is an opportunity for you to engage with the material in a smaller setting with our teaching fellows.
We will not take attendance, but again, its highly recommended that you attend (our teaching fellows can provide you with another (invaluable) perspective on the material).

{2 Communication}

Announcements and discussions will happen on Piazza.
If you are unfamiliar with Piazza, see their {{: https://support.piazza.com/support/solutions/48000185443 }support page} for information and tutorials.
Some policies regarding the use of Piazza:
- {i Don’t ask homework questions directly.} Formulate a question which will aid your understanding, and could potentially help others.
- {i Don’t give homework solutions directly.} The answer-provider is just as culpable as the answer-receiver in cases of academic misconduct.
- {i Piazza is as useful as it is active.} We will try to answer questions on Piazza in a timely manner, but don’t hesitate to answer questions yourself.

You will also be expected to periodically check this webpage for updates.

{2 Material}

Much of the course (particularly the first half) uses the textbook {{: https://cs3110.github.io/textbook/cover.html}OCaml Programming: Correct + Efficient + Beautiful}.

All other course material will be made available on the course GitHub repository and on this webpage.
If you are unfamiliar with git and GitHub, see the GitHub {{: https://docs.github.com/en/get-started }documentation} for information and tutorials.

{2 Assignments}

There will be 7 graded assignments throughout the semester.
They are made available on Thursdays and are due {b the following Thursday by 11:59PM} (see the {!section-schedule} above).
Most assignments are programming-based, but there will be a few written assignments as well.


Assignments are to be submitted via Gradescope.
If you are unfamiliar with Gradescope, see their {{: https://www.gradescope.com/get_started }Get Started} page for more information.
{b We will drop your lowest assignment grade} so only 6 assignments will count towards your final grade in the course.
This means {b we will not accept late homework assignments, under any circumstances.}

{2 Mini-Projects}

In the second half of the course, we will primarily be working on mini-projects, each of which requires you to build an interpreter.
Each interpreter will be a more efficient and (a bit) more complex than the last.
You should think of these as roughly the same amount of work as a programming assignment, but with a single large programming task (as in building an interpreter) instead of many small programming tasks (as in a problem set).
{b It is not possible to drop a mini-project}.

{2 Policies and Guidelines}

Please read carefully through this general BU {{: https://nmmull.github.io/pages/policies.html }Course Policies} page.
We take all matters of student mental health and safety, inclusion, and academic misconduct very seriously.
