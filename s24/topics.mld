{1 Topics}

{2:course_intro What is this course?}

{b Overview:} We discuss the expectations of the course, and give a rough outline of the topics that will be covered.
We will also touch on the benefits of the functional paradigm.

{b Keywords:} course structure, course policy, OCaml, functional programming

{b Required reading:} OCaml Programming (OCP) {{: https://cs3110.github.io/textbook/chapters/intro/intro.html}1.1-1.3: Better programming through OCaml}

{b Additional information:} Homework 0 is released. {i It's not graded} but it's important that you complete it so that you're set up to submit the later assignments.

{2 Beginning Ocaml}

{3:ocaml_intro_i Expressions}

{b Overview:}
We look at a couple ways of interacting with OCaml via UTop.
We discuss expressions in OCaml, particularly if-expressions and let-expressions, and begin looking more careful at evaluation.

{b Keywords:} UTop, values, expressions, evaluation, types, syntax, dynamic semantics, static semantics, if-expressions, let-expressions, let-defintions

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/toplevel.html }2.1: The OCaml Toplevel}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/compiling.html }2.2.(1-2): Compiling OCaml Programs}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/expressions.html }2.3: Expressions}

{b Additional information:}
- Homework 0 is due on Thursday by 11:59PM
- The office hours calendar has been updated with locations
- Attend lab this week if you need help setting up your programming environment

{3:ocaml_intro_ii Functions}

{b Overview:}
We cover the various ways of defining functions in OCaml, some fundamental and some just convenient.
We note the issue of parentheses, which includes a discussion of the {i right} associativity of function types and the {i left} associativity of function application.
This is all connected to type inference, a topic that will (likely) come up later in the course

{b Keywords:} recursive functions, anonymous functions, (partial) function application,  pipelines, labeled and optional arguments, associativity, type inference

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/functions.html }2.4: Functions}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/printing.html }2.6: Printing}

{b Additional information:}
- Homework 0 is due {i tonight} by 11:59PM
- Homework 1 will be released before the start of lecture

{3:ocaml_intro_iii Unions and Products}

{b Overview:}
We examine unions and products as ways of organizing data in OCaml via variants, tuples and records.
We also start studying pattern matching more closely and, in particular, what exactly a {i pattern} is.

{b Keywords:} variants, pattern matching, wildcards, tuples, records, accessors, record updates


{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/variants.html }3.2: Variants}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/records_tuples.html }3.4: Records and Tuples}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html}3.9.(1-3): Data-Carrying Variants}

{b Additional information:}
- Homework 1 is due on Thursday by 11:59PM
- Discussion this week will provide practice problems for the assignments and the exams

{3:ocaml_intro_iv Lists and IO}

{b Overview:}
We look at lists, our first example of a more complex data type, one which can depend on other types (i.e., it is {i polymorphic}).
We also discuss the connection between lists and tail recursion.
In the reading, we see some useful functions for printing.

{b Keywords.} cons, tail, type constructor, deep pattern matching, unit, printf

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/basics/printing.html }2.6: Printing}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/lists.html }3.1: Lists}

{b Additional information:}
- Homework 1 is due {i tonight} by 11:59PM
- Homework 2 will be released before the start of lecture

{2:ind_types Inductive Types}

{3:ind_types_i Introduction}

{b Overview:}
We cover in more detail algebraic data types (ADTs), in particular recurive ADTs and parametric ADTs.
This will get us set up to start discussing things like evaluation strategies and infinite data types.

{b Required reading:}
OCP {{: https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html }3.9: Algebraic Data Types}

{b Keywords:}
algebraic data types, simple variants, pattern matching, constructors, data-carrying variants, recursive variants, parametric variants, lists, options, results

{b Additional information:}
- Homework 2 is due on Thursday by 11:59PM

{3:ind_types_ii Examples}

{b Overview:}
We see some examples of more complex algebraic data types like trees, as well as some of their operations.

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/algebraic_data_types.html }3.9: Algebraic Data Types}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/trees.html }3.11: Example: Trees}

{b Keywords:}
algebraic data types, trees, pre-order, post-order, membership

{b Additional information:}
- Homework 2 is due on {i tonight} by 11:59PM

{2:ho Higher-Order Programming}

{3:ho_i Maps and Filters}

{b Overview:}
We introduce the notion of higher-order functions, which can be used to parametrize functions by other functions.
We look at two common higher order functions: map and filter.

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/higher_order.html }4.1: Higher-Order Functions}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/map.html}4.2: Map}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/filter.html}4.3: Filter}

{b Keywords:}
higher-order functions, first-class values, functions as function parameters, the abstraction principle, map, filter

{b Additional information:}
- This lecture is on Thursday instead of Tuesday because of cancellations due to weather
- Homework 3 is due on Friday by 11:59PM

{3:ho_ii Folds and Examples}

{b Overview:}
We finish our discussion of higher-order functions with folding and the use of higher-order functions for data types other than lists.

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/fold.html }4.4: Fold}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/beyond_lists.html }4.5: Beyond Lists}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/pipelining.html }4.6: Pipelining}
- OCP {{: https://cs3110.github.io/textbook/chapters/hop/pipelining.html }4.7: Currying}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/options.html}3.7: Options}

{b Keywords:}
fold right, fold left, tail-recursion, associativity, tree map, tree fold

{b Additional information:}
- Homework 4 is due on Friday by 11:59PM
- No assignment will be assigned this week
- The midterm is next week

{2:inter Intermediate OCaml}

{3:inter_i Options, Monads and Modules}

{b Overview:}
We discuss very briefly the module system of OCaml and the use of monads.

{b Required reading:}
- OCP {{: https://cs3110.github.io/textbook/chapters/data/options.html } 3.7: Options}
- OCP {{: https://cs3110.github.io/textbook/chapters/ds/monads.html }8.7: Monads}
- OCP {{: https://cs3110.github.io/textbook/chapters/modules/module_systems.html }5.1: Module Systems}
- OCP {{: https://cs3110.github.io/textbook/chapters/modules/modules.html }5.2: Modules}

{b Keywords:}
options, monads, modules

{b Additional information:}
- The midterm is next week
- A practice midterm has been posted

{2:grammar Formal Grammar}

{3:grammar_i Introduction}

{b Overview:}
We introduce formal grammars and BNF specifications.

{b Keywords:}
Formal grammar, context-free grammar, BNF specification, nonterminal symbol, terminal symbol, sentential form, sentence, production rule, derivation, recongizing a sentence, generating a sentence, parse tree

{b Additional information:}
- Midterm grades will be posted next week

{3:grammar_ii Ambiguity}

{b Overview:}
We discuss how grammars can be ambiguous, how we might avoid ambiguity, and why we might want to avoid ambiguity.

{b Keywords:}
grammatical ambiguity, (reverse) polish notation, parentheses, fixity, associativity, precedence

{b Additional information:}
- Homework 5 is due on Friday by 11:59PM

{3:grammar_iii Extended BNF and Regular Expressions}

{b Overview.}
We introduce syntactic sugar into our BNF specifications to make them easier to define.
We also take a brief detour to talk about regular grammars and regular expressions, which capture a weaker but ultimately very useful class of grammars.

{b Keywords:}
extended BNF, regular grammars, regular expressions

{b Additional information:}
- Homework 6 is assigned, it will not be due until after the break
- Midterm grades have been posted

{2:parse Parsing}

{3:parse_i Introduction}

{b Overview:}
We begin our study of parsing, starting with lexical analysis, and then thinking a bit about the general parsing problem.
We will look at an example of recursive descent, a top-down parsing method.

{b Keywords:}
parser generators, lexical analysis, lexeme, token, parsing, recursive descent

{b Supplemental reading:}
Much of this part of the course is based loosely on the book {i Concepts of Programming Languages} by Robert W. Sebesta (available online without looking too hard, though we don't explicitly condone this...)
We diverge from the book a fair amount, but if you want some additional reading on the topics, this source may be useful.
- CPL 4.1: Introduction
- CPL 4.2: Lexical Analysis
- CPL 4.3: The Parsing Problem
- CPL 4.4: Recursive-Descent Parsing

{b Additional information:}
- Homework 6 is due on Friday by 11:59PM
- The withdraw deadline for the course is March 29th

{3:parse_ii Parsing in OCaml}

{3:parse_iii Combinators}

{2:sem Formal Semantics}

{3:sem_i Operational Semantics}

{3:sem_ii Applying Rules}

{3:sem_iii Designing Rules}

{2:var Variables}

{3:var_i Scoping}

{3:var_ii Binding}

{2:sub Subprograms}

{3:sub_i Introduction}

{3:sub_ii Activation Records}

{3:sub_iii Activation Stack}

{2:adv Advanced Topics}

{3:adv_topic Infinite Data Types}
