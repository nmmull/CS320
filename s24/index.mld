{0 CAS CS 320: Concepts of Programming Languages}

{1 What is this course?}

CAS CS 320 is a course {i about} programming languages, particularly the {b design} and {b implementation} of programming languages.
In this course, we take up the "programming language" as an {i object of formal study}.
This course is {i not} about how to program, though the principles we cover are generally useful for designing and reasoning about programs.

The first part of this course is on functional programming in {{: https://ocaml.org/ }OCaml}, based on {i CS 3110: Data Structures and Functional Programming} at Cornell University and its associated {{: https://cs3110.github.io/textbook/cover.html }textbook} (referred to as OCP below).
Its topics include strong typing, data abstraction, higher-order functions, combinators, and polymorphism.
It is during this part that we learn to {i think} functionally, to view programs not (necessarily) as sequences of commands manipulating some global state, but as compositions of (pure) functions which decompose and reorient data.

In the second part of the course we {i implement} an interpreter for a simple (but ultimately quite powerful) programming language.
The part includes topics like include parsing, syntax and semantics, variable scope and binding, storage management, and infinite data types.
After this part, you will have {i your own implementation} of a programming language for which you can write and run programs (pretty neat).

{2 Prerequisites}

- CAS CS 111 & 112: Introduction to Computer Science
- CAS CS 131: Combinatoric Structures
- CAS CS 210: Computer Systems

Generally speaking, you will get the most out of this course (and will have the best time of it) if you complete the 200 level courses required for the degree of computer science beforehand.
Above all, experience with a high-level programming language (like Python or Java) is essential.

{2 Requisites}

The workload for this course consists of assignments, a project, and a final exam.
Your final grade in this course will be determined by the following breakdown:

- 20% Written assignments (4 assignments, 5% each)
- 20% Programming assignments (4 assignments, 5% each)
- 30% Programming project (3 parts, 10% each)
- 30% Final exam

{2 Course Staff}

{b Instructors:} Assaf Kfoury and Nathan Mull

{b Teaching Fellows/Assistants:} TBD

{b Course Assistants:} TBD

See the syllabus for this course for more logistical details regarding the course.

{1 Important Links}

- Piazza
- Gradescope
- Office hours calendar
- OCaml
- Syllabus

{1 Schedule}

{t
  | Week | Date | Topic | Reading | Notes |
  | :--: | :--: | :---- | :------ | :---- |
  | 1  | 1/18 | {!section-course_intro} | OCP 1.1-1.3 | |
  | 2  | 1/23 | {!section-ocaml_intro} {!section-ocaml_intro_i} | OCP 2.1, 2.2.(1-2), 2.3 | |
  |    | 1/24 | Lab 1: TBD | | |
  |    | 1/25 | {!section-ocaml_intro} {!section-ocaml_intro_ii} | OCP 2.4, 2.6 | |
  | 3  | 1/30 | {!section-ocaml_intro} {!section-ocaml_intro_iii} | OCP 3.2, 3.4 | |
  |    | 1/31 | Lab 2: TBD | | |
  |    | 2/1  | {!section-ocaml_intro} {!section-ocaml_intro_iv} | OCP 3.1 | |
  | 4  | 2/6  | {!section-ind_types} {!section-ind_types_i} | OCP 3.9.(1-4) | |
  |    | 2/7  | Lab 3: TBD | | |
  |    | 2/8  | {!section-ind_types} {!section-ind_types_ii} | OCP 3.9.(5-7), 3.11 | |
  | 5  | 2/13 | {!section-ho} {!section-ho_i} | OCP   | |
  |    | 2/14 | Lab 4: TBD | | |
  |    | 2/15 | {!section-ho} {!section-ho_ii} | | |
  | 6  | 2/20 | {!section-inter} {!section-inter_i} | OCP 3.7, OCP 8.7| |
  |    | 2/21 | {b Substitute Monday} | | |
  |    | 2/22 | {!section-inter} {!section-inter_ii} | | |
  | 7  | 2/27 | {!section-inter} {!section-inter_iii} | | |
  |    | 2/28 | Lab 5: TBD | | |
  |    | 2/29 | {!section-grammar} {!section-grammar_i} | | |
  | 8  | 3/5  | {!section-grammar} {!section-grammar_ii}| | |
  |    | 3/6  | Lab 6: TBD | | |
  |    | 3/7  | {!section-grammar} {!section-grammar_iii} | | |
  |    |      | {b Spring Recess } | | |
  | 9  | 3/19 | {!section-parse} {!section-parse_i} | | |
  |    | 3/20 | Lab 7: TBD | | |
  |    | 3/21 | {!section-parse} {!section-parse_ii} | | |
  | 10 | 3/26 | {!section-sem} {!section-sem_i} | | |
  |    | 3/27 | Lab 8: TBD | | |
  |    | 3/28 | {!section-sem} {!section-sem_ii} | | |
  | 11 | 4/2  | {!section-var} {!section-var_i} | | |
  |    | 4/3  | Lab 9: TBD | | |
  |    | 4/4  | {!section-var} {!section-var_ii} | | |
  | 12 | 4/9  | {!section-sub} {!section-sub_i} | | |
  |    | 4/10 | Lab 10: TBD | | |
  |    | 4/11 | {!section-sub} {!section-sub_ii} | | |
  | 13 | 4/16 | {!section-sub} {!section-sub_iii} | | |
  |    | 4/17 | Lab 11: TBD | | |
  |    | 4/18 | {!section-inf} {!section-inf_i} | | |
  | 14 | 4/23 | {!section-inf} {!section-inf_ii} | | |
  |    | 4/24 | Lab 12: TBD | | |
  |    | 4/25 | {!section-inf} {!section-inf_iii} | | |
  | 15 | 4/30 | Final exam review session | | |
}

{1 Material}

{2 Slides}

{2 Labs}

{1 Topics}

{2:course_intro What is this course?}

This is a very simple summary of what is covered in this lecture.
It's not meant to be exhaustive, just make more clear what it is that we are supposed to cover.
What are the learning objectives.

{b Required reading:} OCaml Programming (OCP) 1.1-1.3: Better programming through OCaml

{b Learning objectives}

{2:ocaml_intro Beginning OCaml}
{3:ocaml_intro_i I:  Expressions}

{3:ocaml_intro_ii II: Functions}

{3:ocaml_intro_iii III: Unions, products}

{3:ocaml_intro_iv IV: IO, Lists}

{2:ind_types Inductive types}

{3:ind_types_i I: Introduction}

{3:ind_types_ii II: Examples}

{2:ho Higher-Order Programming}

{3:ho_i I: Map, filter}

{3:ho_ii II: Fold, examples}

{2:inter Intermediate OCaml}

{3:inter_i I: Options, monads}

{3:inter_ii II: Modules}

{3:inter_iii III: Mutability}

{2:grammar Formal Grammar}

{3:grammar_i I: Introduction}

{3:grammar_ii II: Ambiguity, precedence}

{3:grammar_iii III: Extended BNFs, regular expressions}

{2:parse Parsing}

{3:parse_i I: Introduction}

{3:parse_ii II: Combinators}

{2:sem Formal Semantics}

{3:sem_i I: Operational Semantics}

{3:sem_ii II: Rules and Judgments}

{2:var Variables}

{3:var_i I: Scoping}

{3:var_ii II: Binding}

{2:sub Subprograms}

{3:sub_i I: Introduction}

{3:sub_ii II: Activation records}

{3:sub_iii III: Activation stack}

{2:inf Infinite data types}

{3:inf_i I: Introduction}

{3:inf_ii II: Streams}

{3:inf_iii III: Examples of streams}

{2:final Final Exam Review}

{1 Log}